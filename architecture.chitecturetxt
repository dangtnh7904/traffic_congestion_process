┌─────────────────────────────────────────────────────────────────────────────┐
│                    SIMPLIFIED REAL-WORLD ARCHITECTURE                       │
│              Focus: Real-time Route Recommendation + Analytics              │
│                    (Practical for 6-month bachelor thesis)                  │
└─────────────────────────────────────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                         DATA COLLECTION LAYER                               │
│                    (Updates every 5 minutes from HERE API)                  │
└─────────────────────────────────────────────────────────────────────────────┘

   ┌──────────────┐
   │  HERE API    │  (Poll every 5 minutes - Free tier: 250k/month)
   │              │  Returns: speed, jam_factor, coordinates for Hanoi roads
   └──────┬───────┘
          │
          ▼
   ┌─────────────────────────────────────────────────────────────────┐
   │              DATA INGESTION SERVICE (data_collector.py)         │
   │  ──────────────────────────────────────────────────────────     │
   │  Single Python script that runs every 5 minutes (cron/systemd)  │
   │                                                                  │
   │  ┌──────────────────────────────────────────────────────┐      │
   │  │  Step 1: API Fetcher                                 │      │
   │  │     - Call HERE API for Hanoi bounding box           │      │
   │  │     - Basic retry logic (3 attempts)                 │      │
   │  └────────────────┬─────────────────────────────────────┘      │
   │                   ▼                                             │
   │  ┌──────────────────────────────────────────────────────┐      │
   │  │  Step 2: PREPROCESSING                               │      │
   │  │     ✅ Add timestamp                                  │      │
   │  │     ✅ Flatten JSON structure                         │      │
   │  │     ✅ Calculate:                                     │      │
   │  │        - congestion_level (Green/Yellow/Red)         │      │
   │  │        - speed_ratio                                 │      │
   │  │        - is_rush_hour                                │      │
   │  └────────────────┬─────────────────────────────────────┘      │
   │                   ▼                                             │
   │  ┌──────────────────────────────────────────────────────┐      │
   │  │  Step 3: DUAL WRITE (Simple & Effective)            │      │
   │  │     A. Write to PostgreSQL (for history)             │      │
   │  │     B. Publish to Kafka (for real-time consumers)    │      │
   │  └────────────────┬─────────────────────────────────────┘      │
   └───────────────────┼─────────────────────────────────────────────┘
                       │
                       ├──────────────────┬─────────────────┐
                       ▼                  ▼                 ▼
                  PostgreSQL           Kafka            (Logs)
┌─────────────────────────────────────────────────────────────────────────────┐
│                    REAL-TIME PROCESSING LAYER (KAFKA)                       │
│                 Only 2 consumers - Focus on what matters!                   │
└─────────────────────────────────────────────────────────────────────────────┘

   ┌─────────────────────────────────────────────────────────┐
   │  KAFKA TOPIC: "hanoi-traffic"                           │
   │  - Retention: 7 days                                    │
   │  - Partitions: 1 (simple, enough for thesis)           │
   │  - Data: Preprocessed traffic data                      │
   └────────────────┬────────────────────────────────────────┘
                    │
                    ├────────────────────┬─────────────────────┐
                    ▼                    ▼                     ▼
             ┌──────────────┐    ┌──────────────┐    ┌──────────────┐
             │  Consumer 1  │    │  Consumer 2  │    │ (Future:     │
             │              │    │              │    │  Add more    │
             │ ML INFERENCE │    │ ROUTE UPDATE │    │  as needed)  │
             │ (Predict     │    │ (Update Redis│    │              │
             │  speeds)     │    │  graph)      │    │              │
             └──────┬───────┘    └──────┬───────┘    └──────────────┘
                    │                   │
                    ▼                   ▼
          ┌──────────────────┐  ┌──────────────────┐
          │  Predictions     │  │  REDIS (Cache)   │
          │  (In-memory or   │  │                  │
          │   PostgreSQL)    │  │  - Road graph    │
          └──────────────────┘  │  - Edge weights  │
                                │  - Updated live  │
                                └────────┬─────────┘
                                         │
                                         ▼

┌─────────────────────────────────────────────────────────────────────────────┐
│                         STORAGE LAYER (SIMPLE!)                             │
└─────────────────────────────────────────────────────────────────────────────┘

   ┌──────────────────────────────────────────────────────────┐
   │  PostgreSQL - Only 2 main tables needed!                │
   │  ────────────────────────────────────────────────────    │
   │                                                           │
   │  Table 1: traffic_data                                   │
   │  ─────────────────────                                   │
   │  - timestamp, road_name, lat, lng                        │
   │  - current_speed, congestion_level, jam_factor           │
   │  - is_rush_hour, is_weekend                              │
   │  → Stores ALL traffic data (historical + real-time)     │
   │  → Used for: Training, analytics, dashboard             │
   │                                                           │
   │  Table 2: predictions (Optional - can use in-memory)    │
   │  ──────────────────────                                  │
   │  - timestamp, road_name                                  │
   │  - predicted_speed_10min, predicted_speed_30min          │
   │  → Stores ML predictions                                │
   │  → Used for: Route recommendation                       │
   └──────────────────────────────────────────────────────────┘

   ┌──────────────────────────────────────────────────────────┐
   │  REDIS (In-memory cache - for speed!)                   │
   │  ─────────────────────────────────────────────────       │
   │  - Road network graph (from OpenStreetMap)              │
   │  - Edge weights = predicted speeds                       │
   │  - Updated every 5 minutes by Consumer 2                │
   │  → Used for: Fast route calculation (< 100ms)           │
   └──────────────────────────────────────────────────────────┘
┌─────────────────────────────────────────────────────────────────────────────┐
│                    MACHINE LEARNING LAYER (SIMPLE LSTM)                     │
└─────────────────────────────────────────────────────────────────────────────┘

   ┌──────────────────────────────────────────────────────────┐
   │  OFFLINE: Model Training (Run weekly, not real-time)    │
   │  ───────────────────────────────────────────────────     │
   │  Simple Python script (train_model.py)                  │
   │                                                           │
   │  1. Read last 4 weeks data from PostgreSQL              │
   │  2. Simple feature engineering:                          │
   │     - Hour, day_of_week, is_weekend, is_rush_hour       │
   │     - Rolling average (last 30 min, 1 hour)             │
   │  3. Train basic LSTM model:                              │
   │     - Input: Last 12 time steps (1 hour)                │
   │     - Output: Predicted speed in 10 minutes             │
   │  4. Save model as traffic_model.h5                      │
   │  5. Run manually or schedule with cron (weekly)         │
   └──────────────────────────────────────────────────────────┘

   ┌──────────────────────────────────────────────────────────┐
   │  ONLINE: Real-time Inference (Kafka Consumer 1)         │
   │  ───────────────────────────────────────────────────     │
   │  1. Load trained model into memory (once at startup)    │
   │  2. Read traffic data from Kafka                         │
   │  3. Predict speed for next 10-30 minutes                │
   │  4. Store predictions (in-memory dict or PostgreSQL)    │
   │  5. Consumer 2 uses predictions to update Redis graph   │
   └──────────────────────────────────────────────────────────┘
┌─────────────────────────────────────────────────────────────────────────────┐
│                         APPLICATION LAYER                                   │
│                      (Simple FastAPI + Streamlit)                           │
└─────────────────────────────────────────────────────────────────────────────┘

   ┌──────────────────────────────────────────────────────────────────────┐
   │  FastAPI Backend (api_server.py)                                    │
   │  ─────────────────────────────────────────────────────────────────   │
   │  Only 3 essential endpoints:                                         │
   │                                                                       │
   │  ┌────────────────────────────────────────────────────────────────┐ │
   │  │  1. GET /traffic/current                                       │ │
   │  │     Returns: Current speed & congestion for all roads          │ │
   │  │     Source: Latest data from PostgreSQL                        │ │
   │  │     Use: Live map coloring                                     │ │
   │  └────────────────────────────────────────────────────────────────┘ │
   │                                                                       │
   │  ┌────────────────────────────────────────────────────────────────┐ │
   │  │  2. POST /route/recommend                             │ │
   │  │     Input: origin, destination coordinates                     │ │
   │  │     Algorithm: Dijkstra with predicted speeds from Redis       │ │
   │  │     Returns: Best route with ETA + 2 alternatives             │ │
   │  └────────────────────────────────────────────────────────────────┘ │
   │                                                                       │
   │  ┌────────────────────────────────────────────────────────────────┐ │
   │  │  3. GET /analytics/trends                                      │ │
   │  │     Returns: Hourly patterns, rush hour stats                  │ │
   │  │     Source: Aggregated queries from PostgreSQL                 │ │
   │  │     Use: Dashboard charts                                      │ │
   │  └────────────────────────────────────────────────────────────────┘ │
   └──────────────────────────────────────────────────────────────────────┘
                                    │
                                    ▼
   ┌──────────────────────────────────────────────────────────────────────┐
   │  Web Dashboard (Streamlit / Plotly Dash / React)                    │
   │  ═══════════════════════════════════════════════════════════════   │
   │                                                                      │
   │  ┌────────────────────────────────────────────────────────────┐    │
   │  │  � TAB 1: REAL-TIME TRAFFIC MAP                           │    │
   │  │  ────────────────────────────────────────────────────────  │    │
   │  │  ┌──────────────────────────────────────────────────────┐  │    │
   │  │  │  Interactive Map (Folium / Leaflet / Mapbox)        │  │    │
   │  │  │                                                       │  │    │
   │  │  │  🟢 Green roads = Smooth traffic (speed > 30 km/h)  │  │    │
   │  │  │  🟡 Yellow roads = Moderate (15-30 km/h)            │  │    │
   │  │  │  🔴 Red roads = Congested (< 15 km/h)               │  │    │
   │  │  │                                                       │  │    │
   │  │  │  User can:                                           │  │    │
   │  │  │  - Click on any road → See details                  │  │    │
   │  │  │  - Zoom in/out                                       │  │    │
   │  │  │  - Auto-refresh every 30 seconds                     │  │    │
   │  │  └──────────────────────────────────────────────────────┘  │    │
   │  │                                                              │    │
   │  │  Live Statistics Panel:                                     │    │
   │  │  ┌────────────────────────────────────────────────────┐    │    │
   │  │  │  Total Roads Monitored: 1,247                      │    │    │
   │  │  │  🟢 Smooth: 823  🟡 Moderate: 312  � Congested: 112│    │    │
   │  │  │  Average City Speed: 28.5 km/h                     │    │    │
   │  │  │  Last Updated: 2 seconds ago                       │    │    │
   │  │  └────────────────────────────────────────────────────┘    │    │
   │  └────────────────────────────────────────────────────────────┘    │
   │                                                                      │
   │  ┌────────────────────────────────────────────────────────────┐    │
   │  │  🚗 TAB 2: ROUTE RECOMMENDATION                            │    │
   │  │  ────────────────────────────────────────────────────────  │    │
   │  │  Input Form:                                               │    │
   │  │  ┌──────────────────────────────────────────────────────┐  │    │
   │  │  │  📍 From: [Select on map or type address]           │  │    │
   │  │  │  📍 To:   [Select on map or type address]           │  │    │
   │  │  │  ⏰ Departure: [Now] or [Select time]                │  │    │
   │  │  │  [🔍 Find Best Route] button                        │  │    │
   │  │  └──────────────────────────────────────────────────────┘  │    │
   │  │                                                              │    │
   │  │  Results:                                                   │    │
   │  │  ┌──────────────────────────────────────────────────────┐  │    │
   │  │  │  🏆 RECOMMENDED ROUTE (Fastest)                      │  │    │
   │  │  │  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  │  │    │
   │  │  │  Route: Tran Phu → Kim Ma → Lang Ha → Giai Phong   │  │    │
   │  │  │  Distance: 4.2 km                                   │  │    │
   │  │  │  ⏱️ ETA: 18 minutes (with current traffic)          │  │    │
   │  │  │  � Traffic: Moderate congestion on Kim Ma          │  │    │
   │  │  │                                                       │  │    │
   │  │  │  [Show on Map] [Alternative Routes]                 │  │    │
   │  │  │                                                       │  │    │
   │  │  │  Alternative Route 2: 4.8 km, 20 min (avoid Kim Ma)│  │    │
   │  │  │  Alternative Route 3: 3.9 km, 22 min (via highway) │  │    │
   │  │  └──────────────────────────────────────────────────────┘  │    │
   │  │                                                              │    │
   │  │  Map shows:                                                 │    │
   │  │  - Blue line = Recommended route                           │    │
   │  │  - Gray lines = Alternative routes                         │    │
   │  │  - Road colors = Current congestion levels                 │    │
   │  └────────────────────────────────────────────────────────────┘    │
   │                                                                      │
   │  ┌────────────────────────────────────────────────────────────┐    │
   │  │  📊 TAB 3: TRAFFIC ANALYTICS & CHARTS                      │    │
   │  │  ────────────────────────────────────────────────────────  │    │
   │  │  Purpose: Understand traffic patterns over time           │    │
   │  │                                                              │    │
   │  │  Chart 1: Average Speed by Hour (Last 7 Days)              │    │
   │  │  ┌──────────────────────────────────────────────────────┐  │    │
   │  │  │     Speed (km/h)                                     │  │    │
   │  │  │  50│                                                 │  │    │
   │  │  │  40│        ╱╲                    ╱╲                │  │    │
   │  │  │  30│      ╱    ╲                ╱    ╲              │  │    │
   │  │  │  20│    ╱        ╲            ╱        ╲            │  │    │
   │  │  │  10│  ╱            ╲        ╱            ╲          │  │    │
   │  │  │   0└────────────────────────────────────────────────│  │    │
   │  │  │     0  2  4  6  8 10 12 14 16 18 20 22 24 (Hour)   │  │    │
   │  │  │                                                       │  │    │
   │  │  │  Insight: Rush hours = 7-9 AM, 5-7 PM (speed drops)│  │    │
   │  │  └──────────────────────────────────────────────────────┘  │    │
   │  │                                                              │    │
   │  │  Chart 2: Top 10 Most Congested Roads (Today)              │    │
   │  │  ┌──────────────────────────────────────────────────────┐  │    │
   │  │  │  Tran Hung Dao    ████████████████ 85% congested    │  │    │
   │  │  │  Kim Ma           ███████████████  78%              │  │    │
   │  │  │  Giai Phong       ████████████     65%              │  │    │
   │  │  │  ...                                                 │  │    │
   │  │  └──────────────────────────────────────────────────────┘  │    │
   │  │                                                              │    │
   │  │  Chart 3: Traffic Trend (Last 30 Days)                     │    │
   │  │  ┌──────────────────────────────────────────────────────┐  │    │
   │  │  │  Shows: Average speed improving or worsening?        │  │    │
   │  │  │  Line chart with trend line                          │  │    │
   │  │  └──────────────────────────────────────────────────────┘  │    │
   │  │                                                              │    │
   │  │  Chart 4: Weekday vs Weekend Comparison                    │    │
   │  │  ┌──────────────────────────────────────────────────────┐  │    │
   │  │  │  Insight: Weekends have 20% less congestion          │  │    │
   │  │  └──────────────────────────────────────────────────────┘  │    │
   │  │                                                              │    │
   │  │  🎯 WHY PLOT DATA IS IMPORTANT:                            │    │
   │  │  ══════════════════════════════════════                    │    │
   │  │  1. User Education: Show patterns (avoid rush hours)      │    │
   │  │  2. Trend Analysis: Is traffic getting worse?             │    │
   │  │  3. Model Validation: Compare predictions vs reality      │    │
   │  │  4. Business Intelligence: For city planners              │    │
   │  │  5. Thesis Value: Demonstrate data analysis skills        │    │
   │  └────────────────────────────────────────────────────────────┘    │
   │                                                                      │
   │  ┌────────────────────────────────────────────────────────────┐    │
   │  │  🤖 TAB 4: ML MODEL PERFORMANCE                            │    │
   │  │  ────────────────────────────────────────────────────────  │    │
   │  │  Chart: Actual vs Predicted Speed                          │    │
   │  │  ┌──────────────────────────────────────────────────────┐  │    │
   │  │  │  Shows how accurate the LSTM model is                │  │    │
   │  │  │  - Blue line = Actual speed                          │  │    │
   │  │  │  - Orange line = Predicted speed                     │  │    │
   │  │  │  - Closer = Better model                             │  │    │
   │  │  └──────────────────────────────────────────────────────┘  │    │
   │  │                                                              │    │
   │  │  Metrics:                                                   │    │
   │  │  - RMSE: 3.2 km/h (Root Mean Square Error)                │    │
   │  │  - MAE: 2.1 km/h (Mean Absolute Error)                    │    │
   │  │  - Accuracy: 87% (within 5 km/h)                          │    │
   │  │  - Model Version: LSTM_v1.2.3                             │    │
   │  │  - Last Trained: Oct 14, 2025                             │    │
   │  └────────────────────────────────────────────────────────────┘    │
   └──────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                         MONITORING & OBSERVABILITY                          │
└─────────────────────────────────────────────────────────────────────────────┘

   ┌──────────────────┐   ┌──────────────────┐   ┌──────────────────┐
   │  Logging         │   │  Metrics         │   │  Alerting        │
   │  (Python logging)│   │  (Prometheus)    │   │  (Email/Slack)   │
   │                  │   │                  │   │                  │
   │  - API calls     │   │  - API latency   │   │  - API down      │
   │  - Kafka messages│   │  - Kafka lag     │   │  - Data missing  │
   │  - Predictions   │   │  - Model accuracy│   │  - Model degraded│
   │  - User requests │   │  - Traffic volume│   │  - High latency  │
   └──────────────────┘   └──────────────────┘   └──────────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                    🎯 COMPLETE REAL-TIME FLOW EXAMPLE                       │
│                    (User opens app at 9:00 AM)                              │
└─────────────────────────────────────────────────────────────────────────────┘

Timeline:
─────────

08:55:00  HERE API fetched latest traffic data
08:55:10  Preprocessor cleaned & enriched data
08:55:15  Kafka Producer published to "hanoi-traffic-preprocessed"
08:55:20  5 Consumers started processing in parallel:
          
          Consumer #1 (Storage):
          ├─> Saved raw data to PostgreSQL
          
          Consumer #2 (ML Inference):
          ├─> Loaded LSTM model from memory
          ├─> Predicted speeds for 9:05, 9:15, 9:25 AM
          ├─> Published predictions to "traffic-predictions" topic
          
          Consumer #3 (Metrics):
          ├─> Calculated: Avg speed, congestion count
          ├─> Saved to real_time_metrics table
          
          Consumer #4 (Plot Data):
          ├─> Aggregated hourly averages
          ├─> Updated plot_data table
          
          Consumer #5 (Route Optimizer):
          ├─> Read predictions from Kafka
          ├─> Updated Redis graph with new edge weights
          ├─> Graph now has predictions for 9:05, 9:15, 9:25 AM

08:55:30  ✅ System ready for user requests!

09:00:00  👤 USER OPENS DASHBOARD
          
          Action 1: View Real-time Traffic Map
          ├─> Dashboard calls: GET /traffic/realtime
          ├─> API reads: real_time_metrics table
          ├─> Response time: 20ms
          └─> User sees: Green/yellow/red roads on map 🗺️
          
          Action 2: Check Traffic Trends
          ├─> Dashboard calls: GET /plot-data/trends
          ├─> API reads: plot_data table (pre-aggregated)
          ├─> Response time: 15ms
          └─> User sees: Charts showing rush hour patterns 📊
          
          Action 3: Request Route Recommendation
          ├─> User selects: Origin = "Tran Phu", Destination = "Giai Phong"
          ├─> Dashboard calls: POST /recommend-route
          ├─> API process:
          │   ├─> Read graph from Redis (has predicted speeds)
          │   ├─> Run Dijkstra algorithm
          │   ├─> Calculate ETA using predictions
          │   └─> Return best route
          ├─> Response time: 85ms ⚡
          └─> User sees: 
              ├─> Route: Tran Phu → Kim Ma → Lang Ha → Giai Phong
              ├─> Distance: 4.2 km
              ├─> ETA: 18 minutes (using predicted speeds!)
              └─> Warning: "Kim Ma road will be moderately congested"

09:00:01  User clicks "Start Navigation"
          └─> Route displayed on map with live traffic colors

09:00:30  Background: New data arrives (next poll cycle starts)
          └─> Entire pipeline repeats every 5 minutes


┌─────────────────────────────────────────────────────────────────────────────┐
│                    📊 PLOT DATA - WHY IT'S CRITICAL                         │
└─────────────────────────────────────────────────────────────────────────────┘

1. USER BENEFITS:
   ═════════════
   ✅ Pattern Recognition: "Every weekday 8-9 AM, Tran Hung Dao is congested"
      → User learns to avoid this road during rush hour
   
   ✅ Trip Planning: User checks historical data before planning a trip
      → "I'll travel at 10 AM instead of 8 AM to save 20 minutes"
   
   ✅ Trend Awareness: "Traffic is getting 10% worse every month"
      → User adjusts commute habits or considers public transport

2. SYSTEM BENEFITS:
   ════════════════
   ✅ Model Validation: Compare LSTM predictions vs actual speeds
      → If prediction error increases, retrain model
   
   ✅ Anomaly Detection: Sudden speed drop on a road?
      → Could indicate accident, construction, or event
   
   ✅ Performance Metrics: Show stakeholders system is working
      → "Our predictions are 87% accurate"

3. BUSINESS VALUE:
   ═══════════════
   ✅ City Planning: Which roads need expansion?
      → Data shows Tran Hung Dao is congested 70% of the time
   
   ✅ Policy Making: Should rush hour restrictions be implemented?
      → Data shows traffic reduces 20% when restrictions active
   
   ✅ Economic Impact: Calculate time wasted in traffic
      → "Hanoi commuters waste 2 million hours/month in congestion"

4. THESIS VALUE:
   ═════════════
   ✅ Demonstrates data analysis skills (not just engineering)
   ✅ Shows understanding of business applications
   ✅ Provides insights beyond "system works"
   ✅ Impressive visualizations for presentation


┌─────────────────────────────────────────────────────────────────────────────┐
│                    ⚡ PERFORMANCE REQUIREMENTS                               │
└─────────────────────────────────────────────────────────────────────────────┘

Component                    Target Latency     Why It Matters
──────────────────────────────────────────────────────────────────────────────
HERE API fetch               < 2 seconds        API response time
Preprocessing                < 500ms            Simple transformations
Kafka publish                < 100ms            Message queue write
ML Inference (per road)      < 50ms             LSTM forward pass
Route recommendation         < 100ms            User experience
Dashboard map load           < 1 second         User experience
Chart rendering              < 500ms            Pre-aggregated data
Real-time map update         Every 30s          Balance freshness vs load


┌─────────────────────────────────────────────────────────────────────────────┐
│                    🎓 KEY TAKEAWAYS FOR YOUR THESIS                         │
└─────────────────────────────────────────────────────────────────────────────┘

1. ✅ REAL-TIME system using Kafka for streaming data
2. ✅ ML predictions (LSTM) running in real-time pipeline
3. ✅ Route recommendation with < 100ms response time
4. ✅ Interactive dashboard with live traffic visualization
5. ✅ Historical analysis with plot data for insights
6. ✅ Batch processing (Airflow) for model improvement
7. ✅ Scalable architecture (can handle millions of requests)
8. ✅ Production-ready with monitoring and alerting

This architecture combines:
- Data Engineering (Kafka, Airflow, PostgreSQL)
- Data Science (LSTM, feature engineering, prediction)
- Software Engineering (FastAPI, Redis, Docker)
- Data Visualization (Dashboard, charts, maps)
- System Design (Scalability, fault tolerance)

Perfect for a bachelor thesis! 🚀